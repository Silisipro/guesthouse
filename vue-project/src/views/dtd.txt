<template>
  <div v-if="isVisible" class="fixed inset-0 flex items-center justify-center z-50">
    <div class="fixed inset-0 bg-gray-900 opacity-50" @click="close"></div>
    <div class="bg-white p-6 rounded-lg shadow-lg relative z-10">
      <slot></slot>
      <button @click="close" class="absolute top-2 right-2 text-gray-500 hover:text-gray-800">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue'

const props = defineProps({
  modelValue: Boolean
})

const emit = defineEmits(['update:modelValue'])

const isVisible = ref(props.modelValue)

const close = () => {
  isVisible.value = false
  emit('update:modelValue', false)
}

watch(() => props.modelValue, (newValue) => {
  isVisible.value = newValue
})
</script>



<template>
  <div>
    <button @click="openModal" class="bg-blue-500 text-white px-4 py-2 rounded">Add Task</button>
    <Modal v-model:visible="showModal">
      <h2 class="text-xl font-bold mb-4">{{ formTitle }}</h2>
      <form @submit.prevent="handleSubmit">
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700">Title</label>
          <input v-model="form.title" type="text" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700">Description</label>
          <textarea v-model="form.description" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm"></textarea>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700">Start Date</label>
          <input v-model="form.startDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700">Due Date</label>
          <input v-model="form.dueDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm"/>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700">Priority</label>
          <select v-model="form.priority" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm">
            <option value="">None</option>
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
          </select>
        </div>
        <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded">Save</button>
      </form>
    </Modal>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue'
import Modal from './Modal.vue'
import useTodos from '../store/useTodos'

const { addTodo, updateTodo } = useTodos()

const props = defineProps({
  todo: Object,
  index: Number
})

const form = ref({
  title: '',
  description: '',
  startDate: '',
  dueDate: '',
  priority: ''
})

const showModal = ref(false)
const editIndex = ref(null)

const openModal = () => {
  showModal.value = true
}

const handleSubmit = () => {
  if (editIndex.value !== null) {
    updateTodo(editIndex.value, form.value)
  } else {
    addTodo(form.value)
  }
  form.value = {
    title: '',
    description: '',
    startDate: '',
    dueDate: '',
    priority: ''
  }
  showModal.value = false
}

watch(() => props.todo, (newTodo) => {
  if (newTodo) {
    form.value = { ...newTodo }
  }
})
</script>



<template>
  <div class="p-4">
    <ul>
      <li v-for="(todo, index) in todos" :key="index" class="flex justify-between items-center mb-2">
        <div>
          <h2 class="font-semibold">{{ todo.title }}</h2>
          <p>{{ todo.description }}</p>
          <p>Start Date: {{ todo.startDate }}</p>
          <p>Due Date: {{ todo.dueDate }}</p>
          <p>Priority: {{ todo.priority }}</p>
        </div>
        <div>
          <button @click="editTodo(index)" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
          <button @click="confirmDelete(index)" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
        </div>
      </li>
    </ul>
    <Modal v-model:visible="showConfirmationModal">
      <h2 class="text-xl font-bold mb-4">Confirm Delete</h2>
      <p>Are you sure you want to delete this task?</p>
      <button @click="deleteTodo" class="bg-red-500 text-white px-4 py-2 rounded">Yes, Delete</button>
      <button @click="closeConfirmationModal" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
    </Modal>
    <TodoForm :todo="selectedTodo" :index="selectedIndex" v-if="selectedTodo !== null"/>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import Modal from './Modal.vue'
import useTodos from '../store/useTodos'
import TodoForm from './TodoForm.vue'

const { todos, deleteTodo } = useTodos()

const selectedTodo = ref(null)
const selectedIndex = ref(null)
const showConfirmationModal = ref(false)

const editTodo = (index) => {
  selectedTodo.value = { ...todos.value[index] }
  selectedIndex.value = index
}

const confirmDelete = (index) => {
  selectedIndex.value = index
  showConfirmationModal.value = true
}

const deleteTodo = () => {
  if (selectedIndex.value !== null) {
    deleteTodo(selectedIndex.value)
  }
  selectedIndex.value = null
  showConfirmationModal.value = false
}

const closeConfirmationModal = () => {
  showConfirmationModal.value = false
}
</script>



import { createStore } from 'vuex'

const store = createStore({
  state() {
    return {
      tasks: JSON.parse(localStorage.getItem('tasks')) || []
    }
  },
  mutations: {
    ADD_TASK(state, task) {
      state.tasks.push(task)
      localStorage.setItem('tasks', JSON.stringify(state.tasks))
    },
    UPDATE_TASK(state, { index, updatedTask }) {
      state.tasks[index] = updatedTask
      localStorage.setItem('tasks', JSON.stringify(state.tasks))
    },
    DELETE_TASK(state, index) {
      state.tasks.splice(index, 1)
      localStorage.setItem('tasks', JSON.stringify(state.tasks))
    }
  },
  actions: {
    addTask({ commit }, task) {
      commit('ADD_TASK', task)
    },
    updateTask({ commit }, payload) {
      commit('UPDATE_TASK', payload)
    },
    deleteTask({ commit }, index) {
      commit('DELETE_TASK', index)
    }
  },
  getters: {
    allTasks: (state) => state.tasks,
    sortedTasks: (state) => {
      return [...state.tasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))
    }
  }
})

export default store



<template>
  <div class="p-4 bg-white rounded-lg shadow-lg">
    <h2 class="text-xl font-bold mb-4">{{ isEdit ? 'Edit Task' : 'Add Task' }}</h2>
    <form @submit.prevent="submitForm">
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Title</label>
        <input v-model="task.title" type="text" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required />
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Description</label>
        <textarea v-model="task.description" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm"></textarea>
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Start Date</label>
        <input v-model="task.startDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" />
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Due Date</label>
        <input v-model="task.dueDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" />
      </div>
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Priority</label>
        <select v-model="task.priority" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm">
          <option value="Low">Low</option>
          <option value="Medium">Medium</option>
          <option value="High">High</option>
        </select>
      </div>
      <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">{{ isEdit ? 'Update Task' : 'Add Task' }}</button>
    </form>
  </div>
</template>

<script setup>
import { ref, defineProps, defineEmits, watch } from 'vue'
import { useStore } from 'vuex'

const props = defineProps({
  task: Object,
  index: Number
})

const emit = defineEmits(['submit'])

const store = useStore()

const task = ref({
  title: '',
  description: '',
  startDate: '',
  dueDate: '',
  priority: 'Low',
  ...props.task
})

const isEdit = props.task !== undefined

const submitForm = () => {
  if (isEdit) {
    store.dispatch('updateTask', { index: props.index, updatedTask: task.value })
  } else {
    store.dispatch('addTask', task.value)
  }
  emit('submit')
}

watch(() => props.task, (newTask) => {
  if (newTask) {
    task.value = { ...newTask }
  }
})
</script>



<template>
  <div>
    <ul class="list-none p-0">
      <li v-for="(task, index) in tasks" :key="index" class="flex justify-between items-center mb-4 p-4 bg-white rounded-lg shadow-md">
        <div>
          <h3 class="text-lg font-semibold">{{ task.title }}</h3>
          <p>{{ task.description }}</p>
          <p>Start Date: {{ task.startDate }}</p>
          <p>Due Date: {{ task.dueDate }}</p>
          <p>Priority: {{ task.priority }}</p>
        </div>
        <div class="flex gap-2">
          <button @click="editTask(index)" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
          <button @click="confirmDelete(index)" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
        </div>
      </li>
    </ul>
    <Modal v-model:visible="showConfirmationModal">
      <h2 class="text-xl font-bold mb-4">Confirm Delete</h2>
      <p>Are you sure you want to delete this task?</p>
      <button @click="deleteTask" class="bg-red-500 text-white px-4 py-2 rounded">Yes, Delete</button>
      <button @click="closeConfirmationModal" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
    </Modal>
    <TaskForm :task="selectedTask" :index="selectedIndex" @submit="fetchTasks"/>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useStore } from 'vuex'
import TaskForm from './TaskForm.vue'
import Modal from './Modal.vue'

const store = useStore()
const tasks = store.getters.sortedTasks

const selectedTask = ref(null)
const selectedIndex = ref(null)
const showConfirmationModal = ref(false)

const editTask = (index) => {
  selectedTask.value = { ...tasks.value[index] }
  selectedIndex.value = index
}

const confirmDelete = (index) => {
  selectedIndex.value = index
  showConfirmationModal.value = true
}

const deleteTask = () => {
  if (selectedIndex.value !== null) {
    store.dispatch('deleteTask', selectedIndex.value)
  }
  selectedIndex.value = null
  showConfirmationModal.value = false
}

const closeConfirmationModal = () => {
  showConfirmationModal.value = false
}

const fetchTasks = () => {
  // Optionally fetch tasks again if needed
}
</script>


import { createStore } from 'vuex'

const store = createStore({
  state: {
    tasks: JSON.parse(localStorage.getItem('tasks')) || []
  },
  mutations: {
    ADD_TASK(state, task) {
      state.tasks.push(task)
      localStorage.setItem('tasks', JSON.stringify(state.tasks))
    },
    UPDATE_TASK(state, { index, task }) {
      state.tasks[index] = task
      localStorage.setItem('tasks', JSON.stringify(state.tasks))
    },
    DELETE_TASK(state, index) {
      state.tasks.splice(index, 1)
      localStorage.setItem('tasks', JSON.stringify(state.tasks))
    }
  },
  actions: {
    addTask({ commit }, task) {
      commit('ADD_TASK', task)
    },
    updateTask({ commit }, payload) {
      commit('UPDATE_TASK', payload)
    },
    deleteTask({ commit }, index) {
      commit('DELETE_TASK', index)
    }
  },
  getters: {
    tasks: (state) => state.tasks
  }
})

export default store


<template>
  <div class="p-4">
    <form @submit.prevent="handleSubmit" class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700">Title</label>
        <input v-model="form.title" type="text" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required />
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Description</label>
        <textarea v-model="form.description" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required></textarea>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Start Date</label>
        <input v-model="form.startDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required />
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Due Date</label>
        <input v-model="form.dueDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required />
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Priority</label>
        <select v-model="form.priority" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required>
          <option value="">None</option>
          <option value="Low">Low</option>
          <option value="Medium">Medium</option>
          <option value="High">High</option>
        </select>
      </div>
      <div>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Save</button>
        <button type="button" @click="cancel" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
      </div>
    </form>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useStore } from 'vuex'

const props = defineProps({
  task: Object,
  index: Number
})

const emit = defineEmits(['close'])

const store = useStore()
const form = ref({ ...props.task })

const handleSubmit = () => {
  if (props.index !== undefined) {
    store.dispatch('updateTask', { index: props.index, task: form.value })
  } else {
    store.dispatch('addTask', form.value)
  }
  emit('close')
}

const cancel = () => {
  emit('close')
}
</script>


<template>
  <div class="p-4">
    <button @click="showForm = true" class="bg-blue-500 text-white px-4 py-2 rounded">Add Task</button>
    <ul class="mt-4">
      <li v-for="(task, index) in tasks" :key="index" class="mb-2 border p-4 rounded-lg">
        <h2 class="font-bold">{{ task.title }}</h2>
        <p>{{ task.description }}</p>
        <p>Start Date: {{ task.startDate }}</p>
        <p>Due Date: {{ task.dueDate }}</p>
        <p>Priority: {{ task.priority }}</p>
        <button @click="editTask(index)" class="bg-yellow-500 text-white px-2 py-1 rounded">Edit</button>
        <button @click="confirmDelete(index)" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
      </li>
    </ul>

    <TaskForm v-if="showForm" :task="selectedTask" :index="selectedIndex" @close="showForm = false" />
    
    <Modal v-if="showConfirmationModal" @close="showConfirmationModal = false">
      <h2 class="text-xl font-bold mb-4">Confirm Delete</h2>
      <p>Are you sure you want to delete this task?</p>
      <button @click="deleteTask" class="bg-red-500 text-white px-4 py-2 rounded">Yes, Delete</button>
      <button @click="closeConfirmationModal" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
    </Modal>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useStore } from 'vuex'
import TaskForm from './TaskForm.vue'
import Modal from './Modal.vue'

const store = useStore()
const tasks = store.getters.tasks
const showForm = ref(false)
const showConfirmationModal = ref(false)
const selectedTask = ref(null)
const selectedIndex = ref(null)

const editTask = (index) => {
  selectedTask.value = { ...tasks[index] }
  selectedIndex.value = index
  showForm.value = true
}

const confirmDelete = (index) => {
  selectedIndex.value = index
  showConfirmationModal.value = true
}

const deleteTask = () => {
  store.dispatch('deleteTask', selectedIndex.value)
  selectedIndex.value = null
  showConfirmationModal.value = false
}

const closeConfirmationModal = () => {
  showConfirmationModal.value = false
}
</script>



<template>
  <div v-if="isVisible" class="fixed inset-0 flex items-center justify-center z-50">
    <div class="fixed inset-0 bg-gray-900 opacity-50" @click="close"></div>
    <div class="bg-white p-6 rounded-lg shadow-lg relative z-10">
      <slot></slot>
      <button @click="close" class="absolute top-2 right-2 text-gray-500 hover:text-gray-800">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue'

const props = defineProps({
  modelValue: Boolean
})

const emit = defineEmits(['update:modelValue'])

const isVisible = ref(props.modelValue)

const close = () => {
  isVisible.value = false
  emit('update:modelValue', false)
}

watch(() => props.modelValue, (newValue) => {
  isVisible.value = newValue
})
</script>


<template>
  <div class="min-h-screen bg-gray-100 p-6">
    <h1 class="text-2xl font-bold mb-4">Task Manager</h1>
    <TaskList />
  </div>
</template>

<script setup>
import TaskList from './components/TaskList.vue'
</script>



voici une image. si je click sur add le modal s'affiche pour ajouter le todo et appres reusite la liste comme sur l'image s'affiche



<template>
  <div class="p-4 bg-white rounded-lg shadow-md">
    <form @submit.prevent="handleSubmit" class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700">Title</label>
        <input v-model="form.title" type="text" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required />
        <p v-if="errors.title" class="text-red-500 text-sm mt-1">{{ errors.title }}</p>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Description</label>
        <textarea v-model="form.description" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required></textarea>
        <p v-if="errors.description" class="text-red-500 text-sm mt-1">{{ errors.description }}</p>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Start Date</label>
        <input v-model="form.startDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required />
        <p v-if="errors.startDate" class="text-red-500 text-sm mt-1">{{ errors.startDate }}</p>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Due Date</label>
        <input v-model="form.dueDate" type="date" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required />
        <p v-if="errors.dueDate" class="text-red-500 text-sm mt-1">{{ errors.dueDate }}</p>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Priority</label>
        <select v-model="form.priority" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required>
          <option value="">None</option>
          <option value="Low">Low</option>
          <option value="Medium">Medium</option>
          <option value="High">High</option>
        </select>
      </div>
      <div>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Save</button>
        <button type="button" @click="cancel" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
      </div>
    </form>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue'
import { useStore } from 'vuex'

const props = defineProps({
  task: Object,
  index: Number
})

const emit = defineEmits(['close'])

const store = useStore()
const form = ref({ ...props.task })
const errors = ref({})

const validateForm = () => {
  errors.value = {}
  if (!form.value.title) errors.value.title = 'Title is required'
  if (!form.value.description) errors.value.description = 'Description is required'
  if (form.value.startDate && form.value.dueDate && form.value.startDate > form.value.dueDate) {
    errors.value.dueDate = 'Due Date must be after Start Date'
  }
  return Object.keys(errors.value).length === 0
}

const handleSubmit = () => {
  if (validateForm()) {
    if (props.index !== undefined) {
      store.dispatch('updateTask', { index: props.index, task: form.value })
    } else {
      store.dispatch('addTask', form.value)
    }
    emit('close')
  }
}

const cancel = () => {
  emit('close')
}
</script>



<template>
  <div class="p-4 bg-white rounded-lg shadow-md">
    <div class="flex mb-4">
      <input v-model="search" type="text" placeholder="Search tasks..." class="border-gray-300 rounded-md shadow-sm p-2 w-full" />
      <select v-model="filter" class="ml-2 border-gray-300 rounded-md shadow-sm p-2">
        <option value="">All</option>
        <option value="completed">Completed</option>
        <option value="notCompleted">Not Completed</option>
      </select>
    </div>
    <ul>
      <li v-for="(task, index) in filteredTasks" :key="index" class="mb-2 border p-4 rounded-lg">
        <h2 class="font-bold">{{ task.title }}</h2>
        <p>{{ task.description }}</p>
        <p>Start Date: {{ task.startDate }}</p>
        <p>Due Date: {{ task.dueDate }}</p>
        <p>Priority: {{ task.priority }}</p>
        <input type="checkbox" v-model="task.completed" @change="updateTask(index)" class="mr-2" />
        <button @click="editTask(index)" class="bg-yellow-500 text-white px-2 py-1 rounded">Edit</button>
        <button @click="confirmDelete(index)" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
      </li>
    </ul>

    <TaskForm v-if="showForm" :task="selectedTask" :index="selectedIndex" @close="showForm = false" />
    
    <Modal v-if="showConfirmationModal" @close="showConfirmationModal = false">
      <h2 class="text-xl font-bold mb-4">Confirm Delete</h2>
      <p>Are you sure you want to delete this task?</p>
      <button @click="deleteTask" class="bg-red-500 text-white px-4 py-2 rounded">Yes, Delete</button>
      <button @click="closeConfirmationModal" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
    </Modal>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useStore } from 'vuex'
import TaskForm from './TaskForm.vue'
import Modal from './Modal.vue'

const store = useStore()
const tasks = store.getters.tasks
const showForm = ref(false)
const showConfirmationModal = ref(false)
const selectedTask = ref(null)
const selectedIndex = ref(null)
const search = ref('')
const filter = ref('')

const filteredTasks = computed(() => {
  return tasks
    .filter(task => {
      if (filter.value === 'completed' && !task.completed) return false
      if (filter.value === 'notCompleted' && task.completed) return false
      if (search.value && !task.title.toLowerCase().includes(search.value.toLowerCase())) return false
      return true
    })
})

const editTask = (index) => {
  selectedTask.value = { ...tasks[index] }
  selectedIndex.value = index
  showForm.value = true
}

const confirmDelete = (index) => {
  selectedIndex.value = index
  showConfirmationModal.value = true
}

const deleteTask = () => {
  store.dispatch('deleteTask', selectedIndex.value)
  selectedIndex.value = null
  showConfirmationModal.value = false
}

const closeConfirmationModal = () => {
  showConfirmationModal.value = false
}

const updateTask = (index) => {
  store.dispatch('updateTask', { index, task: tasks[index] })
}
</script>



<template>
  <div class="min-h-screen bg-gray-100 p-6">
    <h1 class="text-2xl font-bold mb-4">Task Manager</h1>
    <TaskList />
  </div>
</template>

<script setup>
import TaskList from './components/TaskList.vue'
</script>




<template>
  <div class="max-w-md mx-auto bg-white shadow-lg rounded-lg p-6">
    <h2 class="text-2xl font-bold mb-4">TO-DO LIST</h2>
    <form @submit.prevent="addTask" class="flex mb-4">
      <input 
        v-model="newTask" 
        type="text" 
        placeholder="Add a task" 
        class="flex-grow p-2 border-b-2 border-teal-500 outline-none"
      />
      <button type="submit" class="ml-2 bg-teal-500 text-white px-4 py-2 rounded">
        Add
      </button>
    </form>
    <ul>
      <li v-for="(task, index) in tasks" :key="index" class="flex items-center mb-2">
        <input 
          type="checkbox" 
          v-model="task.completed" 
          class="mr-2" 
        />
        <span 
          :class="{'line-through': task.completed, 'font-bold': !task.completed}" 
          class="flex-grow"
        >
          {{ task.title }}
          <span v-if="task.dueDate" class="text-sm text-gray-500">Due on {{ task.dueDate }}</span>
        </span>
      </li>
    </ul>
  </div>
</template>

<script setup>
import { ref } from 'vue';

const tasks = ref([
  { title: 'Finish project proposal', completed: false, dueDate: '4/1/23' },
  { title: 'Buy groceries', completed: false, description: 'Bananas, milk, bread' },
  { title: 'Go for a run', completed: false, description: '3 miles' },
]);

const newTask = ref('');

const addTask = () => {
  if (newTask.value.trim() !== '') {
    tasks.value.push({ title: newTask.value, completed: false });
    newTask.value = '';
  }
};
</script>

<style scoped>
/* Ajoutez du style supplémentaire si nécessaire */
</style>



<template>
  <div class="min-h-screen bg-gray-100 flex items-center justify-center">
    <ToDoList />
  </div>
</template>

<script setup>
import ToDoList from './components/ToDoList.vue';
</script>



<template>
  <div class="p-4 bg-white rounded-lg shadow-md">
    <div class="flex mb-4">
      <input v-model="search" type="text" placeholder="Search tasks..." class="border-gray-300 rounded-md shadow-sm p-2 w-full" />
      <select v-model="filterStatus" class="ml-2 border-gray-300 rounded-md shadow-sm p-2">
        <option value="">All</option>
        <option value="completed">Completed</option>
        <option value="notCompleted">Not Completed</option>
      </select>
      <select v-model="filterPriority" class="ml-2 border-gray-300 rounded-md shadow-sm p-2">
        <option value="">All Priorities</option>
        <option value="Low">Low</option>
        <option value="Medium">Medium</option>
        <option value="High">High</option>
      </select>
      <input v-model="filterDate" type="date" class="ml-2 border-gray-300 rounded-md shadow-sm p-2" />
    </div>
    <ul>
      <li v-for="(task, index) in filteredTasks" :key="index" class="mb-2 border p-4 rounded-lg">
        <h2 class="font-bold">{{ task.title }}</h2>
        <p>{{ task.description }}</p>
        <p>Start Date: {{ task.startDate }}</p>
        <p>Due Date: {{ task.dueDate }}</p>
        <p>Priority: {{ task.priority }}</p>
        <input type="checkbox" v-model="task.completed" @change="updateTask(index)" class="mr-2" />
        <button @click="editTask(index)" class="bg-yellow-500 text-white px-2 py-1 rounded">Edit</button>
        <button @click="confirmDelete(index)" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
      </li>
    </ul>
  </div>
</template>



<script setup>
import { ref, computed } from 'vue'
import { useTaskStore } from '@/stores/todo'

const store = useTaskStore()
const search = ref('')
const filterStatus = ref('')
const filterPriority = ref('')
const filterDate = ref('')

const filteredTasks = computed(() => {
  return store.filteredTasks(search.value, filterStatus.value, filterPriority.value, filterDate.value)
})

const updateTask = (index) => {
  store.updateTask(index, store.tasks[index])
}

const editTask = (index) => {
  // Logique pour éditer la tâche
}

const confirmDelete = (index) => {
  // Logique pour confirmer la suppression
}
</script>



<template>
  <div class="w-[60%] mx-auto bg-white shadow-lg rounded-lg p-6 mt-10">
    <h2 class="text-2xl font-bold mb-4">TO-DO LIST</h2>
    <div class="flex mb-4">
      <input v-model="search" type="text" placeholder="Search tasks..." class="flex-grow p-2 border-b-2 border-teal-500 outline-none" />
      <button @click="openAddModal" class="ml-2 bg-teal-500 text-white px-4 py-2 rounded">Add</button>
    </div>
    <select v-model="filter" class="ml-2 border-gray-300 rounded-md shadow-sm p-2">
      <option value="">All</option>
      <option value="completed">Completed</option>
      <option value="notCompleted">Not Completed</option>
    </select>
    <ul>
      <li v-for="(task, index) in filteredTasks" :key="index" class="flex items-center mb-2">
        <input
          type="checkbox"
          v-model="task.completed"
          @change="updateTask(index)"
          class="mr-2"
        />
        <span
          :class="{'line-through': task.completed, 'font-bold': !task.completed}"
          class="flex-grow"
        >
          {{ task.title.slice(0, 20) }}...
          <span v-if="task.dueDate" class="text-sm text-gray-500">Due on {{ task.dueDate }}</span>
        </span>
        <button @click="openDetailModal(index)" class="bg-green-500 text-white px-2 py-1 rounded mr-3">Detail</button>
        <button @click="openEditModal(index)" class="bg-yellow-500 text-white px-2 py-1 rounded mr-3">Edit</button>
        <button @click="confirmDelete(index)" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
      </li>
    </ul>
    <!-- Add Task Modal -->
    <Modal ref="taskModal">
      <TaskForm :task="selectedTask" :index="selectedIndex" @close="closeModal" />
    </Modal>
    <!-- Edit Task Modal -->
    <Modal ref="editModal">
      <TaskForm :task="selectedTask" :index="selectedIndex" @close="closeModal" />
    </Modal>
    <!-- Detail Task Modal -->
    <Modal ref="detailModal">
      <TaskDetail :task="selectedTask" @close="closeDetailModal" />
    </Modal>
    <!-- Confirm Delete Modal -->
    <Modal v-if="showConfirmationModal" @close="closeConfirmationModal">
      <div class="p-4">
        <p>Are you sure you want to delete this task?</p>
        <div class="mt-4">
          <button @click="deleteTask" class="bg-red-500 text-white px-4 py-2 rounded">Delete</button>
          <button @click="closeConfirmationModal" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Cancel</button>
        </div>
      </div>
    </Modal>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useTaskStore } from '@/stores/todo'
import Modal from './Modal.vue'
import TaskForm from './TaskForm.vue'
import TaskDetail from './TaskDetail.vue'

const store = useTaskStore()
const search = ref('')
const filter = ref('')
const showConfirmationModal = ref(false)
const selectedTask = ref(null)
const selectedIndex = ref(null)

const filteredTasks = computed(() => {
  return store.filteredTasks(search.value, filter.value, '', '')
})

const openAddModal = () => {
  selectedTask.value = null
  selectedIndex.value = null
  taskModal.value.openModal()
}

const openEditModal = (index) => {
  selectedTask.value = { ...store.tasks[index] }
  selectedIndex.value = index
  editModal.value.openModal()
}

const openDetailModal = (index) => {
  selectedTask.value = { ...store.tasks[index] }
  detailModal.value.openModal()
}

const closeModal = () => {
  taskModal.value.closeModal()
  editModal.value.closeModal()
}

const closeDetailModal = () => {
  detailModal.value.closeModal()
}

const confirmDelete = (index) => {
  selectedIndex.value = index
  showConfirmationModal.value = true
}

const deleteTask = () => {
  store.deleteTask(selectedIndex.value)
  selectedIndex.value = null
  showConfirmationModal.value = false
}

const closeConfirmationModal = () => {
  showConfirmationModal.value = false
}

const updateTask = (index) => {
  store.updateTask(index, store.tasks[index])
}

const taskModal = ref(null)
const editModal = ref(null)
const detailModal = ref(null)
</script>

<style scoped>
/* Ajoutez du style supplémentaire si nécessaire */
</style>




<template>
  <div class="w-[60%] mx-auto bg-white shadow-lg rounded-lg p-6 mt-10">
    <h2 class="text-2xl font-bold mb-4">TO-DO LIST</h2>
    <div class="flex mb-4">
      <input v-model="search" type="text" placeholder="Search tasks..." class="flex-grow p-2 border-b-2 border-teal-500 outline-none" />
      <button @click="openAddModal" class="ml-2 bg-teal-500 text-white px-4 py-2 rounded">Add</button>
    </div>
    <select v-model="filter" class="ml-2 border-gray-300 rounded-md shadow-sm p-2">
      <option value="">All</option>
      <option value="completed">Completed</option>
      <option value="notCompleted">Not Completed</option>
    </select>
    <ul>
      <li v-for="(task, index) in filteredTasks" :key="index" class="flex items-center mb-2">
        <input
          type="checkbox"
          v-model="task.completed"
          @change="updateTask(index)"
          class="mr-2"
        />
        <span
          :class="{'line-through': task.completed, 'font-bold': !task.completed}"
          class="flex-grow"
        >
          {{ task.title.slice(0, 20) }}...
          <span v-if="task.dueDate" class="text-sm text-gray-500">Due on {{ task.dueDate }}</span>
        </span>
        <button @click="openDetailModal(index)" class="bg-green-500 text-white px-2 py-1 rounded mr-3">Detail</button>
        <button @click="openEditModal(index)" class="bg-yellow-500 text-white px-2 py-1 rounded mr-3">Edit</button>
        <button @click="confirmDelete(index)" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
      </li>
    </ul>
    <!-- Add Task Modal -->
    <Modal ref="taskModal">
      <TaskForm :task="selectedTask" :index="selectedIndex" @close="closeModal" />
    </Modal>
    <!-- Edit Task Modal -->
    <Modal ref="editModal">
      <TaskForm :task="selectedTask" :index="selectedIndex" @close="closeModal" />
    </Modal>
    <!-- Detail Task Modal -->
    <Modal ref="detailModal">
      <TaskDetail :task="selectedTask" @close="closeDetailModal" />
    </Modal>
    <!-- Confirm Delete Modal -->
    <Modal v-if="showConfirmationModal" @close="closeConfirmationModal">
      <div class="p-4">
        <p>Are you sure you want to delete this task?</p>
        <div class="mt-4">
          <button @click="deleteTask" class="bg-red-500 text-white px-4 py-2 rounded">Delete</button>
          <button @click="closeConfirmationModal" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Cancel</button>
        </div>
      </div>
    </Modal>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useTaskStore } from '@/stores/todo'
import Modal from './Modal.vue'
import TaskForm from './TaskForm.vue'
import TaskDetail from './TaskDetail.vue'

const store = useTaskStore()
const search = ref('')
const filter = ref('')
const showConfirmationModal = ref(false)
const selectedTask = ref(null)
const selectedIndex = ref(null)

const filteredTasks = computed(() => {
  return store.filteredTasks(search.value, filter.value, '', '')
})

const openAddModal = () => {
  selectedTask.value = null
  selectedIndex.value = null
  taskModal.value.openModal()
}

const openEditModal = (index) => {
  selectedTask.value = { ...store.tasks[index] }
  selectedIndex.value = index
  editModal.value.openModal()
}

const openDetailModal = (index) => {
  selectedTask.value = { ...store.tasks[index] }
  detailModal.value.openModal()
}

const closeModal = () => {
  taskModal.value.closeModal()
  editModal.value.closeModal()
}

const closeDetailModal = () => {
  detailModal.value.closeModal()
}

const confirmDelete = (index) => {
  selectedIndex.value = index
  showConfirmationModal.value = true
}

const deleteTask = () => {
  store.deleteTask(selectedIndex.value)
  selectedIndex.value = null
  showConfirmationModal.value = false
}

const closeConfirmationModal = () => {
  showConfirmationModal.value = false
}

const updateTask = (index) => {
  store.updateTask(index, store.tasks[index])
}

const taskModal = ref(null)
const editModal = ref(null)
const detailModal = ref(null)
</script>

<style scoped>
/* Ajoutez du style supplémentaire si nécessaire */
</style>
